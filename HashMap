

# put操作

* 将key取hash,判断数组是否为空，如果为空的话则进行resize()
* 将key的hash也map的长度-1 进行& 运算，取出下标
* 如果tab[下标] 为空，则将这个下标的指针指向要添加的节点，返回null
* 如果不为空
  * 则判断这个数据的key和hash约要插入的key和hash是否相同，如果相同，则，判断是否需要修改，如果需要，则指向新的数据
  * 如果数组中的元素的key的值与要插入的key不同，则一直循环这个链表，取出组中的下一个元素约当前要插入的key和key的hash进行比较，如果相同，则表示要修改这个值，知道这个链表的最后一个元素，也就是说下一个元素是null,这时候，会判断当前链表的长度是否是8，如果是，则转成红黑树

# resize()

+ 如果原来的容量(oldCap) >0,则将原来的容量进行位运算，左移1位 << 1,就是扩充两倍
+ 初始化 newThr
+ 创建一个新的数组，大小是新的容量大小
+ 循环原来的容量，遍历元素，如果，查找出来的元素只有一个，也就说说，不是链表和红黑树，则直接与新容量-1 进行位运算，找到下标赋值
+ 如果原来的元素是一个链表，则将原来的元素的key进行hashy与oldCap 进行&运算，&运算的结果只有两种，一种等于0 两一种等于oldCap
+ 这里是一个巧妙的设计，因为等0的，在与newCap - 1 进行位运算的时候，数组下标和原来的与oldCap - 1 运算的结果一样，所以对于等于0的，就可以直接保存到原来的下标中，不等于0的元素，他的下标正好是之前的下标加上oldCap,所以只需要将下标变成当前下标加上oldCap即可

# treeifyBin(转换成红黑树)

* 如果容量小于64，则优先resize()